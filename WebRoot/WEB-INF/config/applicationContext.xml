<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-lazy-init="true">
    
    <!-- @将资源文件加载到spring容器中: PropertyPlaceholderConfigurer加载的资源文件在配置文件中可以用表达式取值-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/jdbc.properties</value>
			</list>
		</property>
	</bean>
    
    <!-- @将资源文件加载到spring容器中: 与PropertyPlaceholderConfigurer的区别在于在配置文件中不能用表达式取值-->
	<bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/*.properties</value>
				<value>/WEB-INF/languages/**/*.properties</value>
			</list>
		</property>
		<!-- 根据基于XML配置中的<qualifier>标签指定的名字进行注入，使用如下方式指定名称 -->
		<qualifier value="main"/>
	</bean>
	
	<!-- @提供PropertiesFactoryBean类取得的资源文件读取的操作的工具类  -->
	<bean id="propertyUtils" class="com.cbai.common.utils.PropertyUtils">
		<property name="properties" ref="properties"/>
	</bean>
    
    <!-- @配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		

		<property name="autoCommitOnClose" value="true"/>
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
		
		<!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个显著提高测试速度。默认null-->  
	    <property name="preferredTestQuery" value="select 1" />  
	    <!--每6个小时检查所有连接池中的空闲连接，这个值一定要小于MySQL的wait_timeout时间，默认为8小时。默认0 -->  
	    <property name="idleConnectionTestPeriod" value="21600"/>  
	</bean>
	
	<!-- 
	<bean id="dataSource" class="com.cbai.common.ibatis.BasicDataSource" destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="initialSize" value="${DBCP.DataSource.jdbc.initSize}"/>
		<property name="minIdle" value="${DBCP.DataSource.jdbc.minIdle}" />
		<property name="maxActive" value="${DBCP.DataSource.jdbc.maxactive}"/> 
		<property name="maxIdle" value="${DBCP.DataSource.jdbc.maxIdle}" />
		<property name="maxWait" value="${DBCP.DataSource.jdbc.maxwait}" />
	</bean>
    -->
    
    <!-- @配置sqlMapClient -->
	<bean id="sqlMapClient" class="com.cbai.common.ibatis.WildcardSqlMapClientFactoryBean">
		<property name="dataSource">
			<ref local="dataSource"/>
		</property>
		<property name="configLocation" value="/WEB-INF/config/ibatis/SqlMapConfig.xml" />
	</bean>
    
    <!-- @配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- @配置事务拦截器 -->
    <bean id="proxyTemplate" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
		
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="huifu*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop> 
				<prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>	
				
				<prop key="buy*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean>

	<!-- @配置事务通知-->
	<bean id="transactionAdvisor" class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor" ref="proxyTemplate" />
	</bean>
	
	<!-- @根据bean名字动态代理,设定拦截的方法 -->
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
		    
			<value>*Service</value>

		</property>
		<property name="interceptorNames">
			<list>				
				<value>transactionAdvisor</value>
			</list>
		</property>
	</bean>
    
    <import resource="core-context.xml"/>
</beans>